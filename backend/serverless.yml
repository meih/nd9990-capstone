service:
  name: serverless-food-review-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin

provider:

  tracing: 
    lambda: true
    apiGateway: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'
      
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    FOOD_REVIEW_TABLE: Food-Review-Table-${self:provider.stage}
    FOOD_REVIEW_INDEX: Food-Review-Index-${self:provider.stage}
    IMAGES_S3_BUCKET: serverless-food-review-meiko-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless Food Review
        description: Serverless Food Review App
    models:
      - name: CreateFoodReviewRequest
        contentType: application/json
        schema: ${file(models/create-food-review-request.json)}
      - name: UpdateFoodReviewRequest
        contentType: application/json
        schema: ${file(models/update-food-review-request.json)}
      
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetFoodReviews:
    handler: src/lambda/http/getFoodReviews.handler
    events:
      - http:
          method: get
          path: review
          cors: true
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FOOD_REVIEW_TABLE}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FOOD_REVIEW_TABLE}/index/${self:provider.environment.FOOD_REVIEW_INDEX}

  CreateFoodReview:
    handler: src/lambda/http/createFoodReview.handler
    events:
      - http:
          method: post
          path: review
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new food review
            description: Create a new food review
            requestModels:
              'application/json': FoodReviewRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FOOD_REVIEW_TABLE}
            
  UpdateFoodReview:
    handler: src/lambda/http/updateFoodReview.handler
    events:
      - http:
          method: patch
          path: review/{foodReviewId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FOOD_REVIEW_TABLE}
        
  DeleteFoodReview:
    handler: src/lambda/http/deleteFoodReview.handler
    events:
      - http:
          method: delete
          path: review/{foodReviewId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FOOD_REVIEW_TABLE}
        
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: review/{foodReviewId}/attachment
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FOOD_REVIEW_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
    
resources:
  Resources:
    ToDoDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: reviewId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: reviewId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.FOOD_REVIEW_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.FOOD_REVIEW_INDEX}
            KeySchema:
              - AttributeName: reviewId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
